from aiogram import Bot
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.markdown import text, bold, italic
from aiogram.types import Message, ParseMode, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,\
    InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import keyboards
import db
import os

bot = Bot(token=os.getenv("token"))
dp = Dispatcher(bot, storage=MemoryStorage())

# –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –ø—Ä–∏–Ω—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
async def on_startup(_):
    print("Bot started OK")
    await db.open_database()
    
    
# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
class AddCursFSM(StatesGroup):
    name = State()
    description = State()
    url = State()


# FSM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
class BoughtCursFSM(StatesGroup):
    curs = State()
    mail = State()

    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def answer_for_start(message: Message):
    
    await db.add_user(message)
    msg = text(bold("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gultyaev History\n"), "–ï—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /moderator, —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", sep="\n")
    await bot.send_message(message.from_user.id, msg, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboards.main_menu())
    
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /moderator
@dp.message_handler(commands=["moderator"])
async def answer_to_moderator(message: Message):
    
    await message.delete()
    if await db.check_admin(message):
        msg = text(italic("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n"), bold("–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:"),\
            "/add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",\
            "/del - —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",\
            "/start - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", sep="\n"
            )
        await bot.send_message(message.from_user.id, msg, parse_mode=ParseMode.MARKDOWN)
    else:
        msg = text(bold("‚ùóÔ∏è–í—ã –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚ùóÔ∏è"))
        await bot.send_message(message.from_user.id, msg, parse_mode=ParseMode.MARKDOWN)
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –∏ –∑–∞–ø—É—Å–∫ FSM *FSM - AddCursFSM*
@dp.message_handler(commands=["add"], state=None)
async def add_curs_FSM_start(message: Message):
    
    if await db.check_admin(message):
        await AddCursFSM.name.set()
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("‚ùå–û–¢–ú–ï–ù–ê‚ùå")))
        
        
# –í—ã—Ö–æ–¥ –∏–∑ FSM –∏ –æ—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è *FSM - AddCursFSM*
@dp.message_handler(lambda msg: msg.text.startswith("‚ùå–û–¢–ú–ï–ù–ê‚ùå"), state=AddCursFSM)
async def add_curs_cancel(message: Message, state: FSMContext):
    
    if await db.check_admin(message):
        curr_state = await state.get_state()
        if state == None:
            return
        else:
            await state.finish()
            await bot.send_message(message.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboards.main_menu())
            

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫—É—Ä—Å–∞ *–°–æ—Å—Ç–æ—è–Ω–∏–µ - name*, *FSM - AddCursFSM*
@dp.message_handler(state=AddCursFSM.name)
async def add_curs_set_name(message: Message, state=FSMContext):
    
    if await db.check_admin(message):
        async with state.proxy() as data:
            data["name"] = message.text
        await AddCursFSM.next()
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞\n\n–ù–µ –ª–µ–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ –≤—Å—è–∫–∏–º–∏ —Å—Å—ã–ª–æ—á–∫–∞–º–∏, –∏–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—èüòâ")
        

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–∞ *–°–æ—Å—Ç–æ—è–Ω–∏–µ - description*, *FSM - AddCursFSM*
@dp.message_handler(state=AddCursFSM.description)
async def add_curs_set_description(message: Message, state: FSMContext):
    
    if await db.check_admin(message):
        async with state.proxy() as data:
            data["description"] = message.text
        await AddCursFSM.next()
        await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –∫—É—Ä—Å–∞")
        
        
        
@dp.message_handler(state=AddCursFSM.url)
async def add_curs_set_url(message: Message, state: FSMContext):
    
    if await db.check_admin(message):
        async with state.proxy() as data:
            data["url"] = message.text
            await db.add_curs(tuple(data.values()))
        await state.finish()
        await bot.send_message(message.from_user.id, "–ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ωü§†", reply_markup=ReplyKeyboardRemove())



# –ö—É–ø–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å + –∑–∞–ø—É—Å–∫ FSM *FSM - BoughtCursFSM*
@dp.message_handler(lambda msg: msg.text.startswith("–Ø –∫—É–ø–∏–ª(–∞) –∫—É—Ä—Å, —á—Ç–æ –¥–µ–ª–∞—Ç—å?"), state=None)
async def load_curs_FSM_start(message: Message):
    
    await BoughtCursFSM.curs.set()
    data = await db.load_curses()
    data = "\n".join(data)
    msg = text(bold("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"), data, sep="\n")
    await bot.send_message(message.from_user.id, msg, parse_mode=ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("‚ùå–û–¢–ú–ï–ù–ê‚ùå")))


# –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞
@dp.message_handler(lambda msg: msg.text.startswith("‚ùå–û–¢–ú–ï–ù–ê‚ùå"), state=BoughtCursFSM)
async def load_curs_cansel(message: Message, state=FSMContext):
    
    if await db.check_admin(message):
        curr_state = await state.get_state()
        if state == None:
            return
        else:
            await state.finish()
            await bot.send_message(message.from_user.id, "–û–ö", reply_markup=keyboards.main_menu())



@dp.message_handler(state=BoughtCursFSM.curs)
async def load_curs_get_name(message: Message, state: FSMContext):
    
    await BoughtCursFSM.next()
    async with state.proxy() as data:
        data["curs"] = message.text
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏—à–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∫—É—Ä—Å–∞")



@dp.message_handler(state=BoughtCursFSM.mail)
async def load_curs_get_mail(message: Message, state: FSMContext):
    
    async with state.proxy() as data:
        data["mail"] = message.text
        # await db.mail_data(tuple(data.values()))
        

    ########### –†–∞–±–æ—Ç–∞–µ–º —Å —ç—Ç–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å 
    # 1) —Å–≤—è–∑—å —Å –±–¥ -> —Å–≤—è–∑—å —Å –ø–æ—á—Ç–æ–π
    # 2) –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞
        
    await state.finish()
    await bot.send_message(message.from_user.id, "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–∫—Ä–∏–ø—Ç–∞–º, –æ—Ç–≤–µ—á–∞—é—â–∏–º –∑–∞:\n–†–∞—Å—Å—ã–ª–∫—É –ø–∏—Å–µ–º –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É –∏ –æ—Ç—Å—ã–ª–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—á—Ç–µ")



@dp.message_handler(lambda msg: msg.text.startswith("–î—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã –æ—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ì—É–ª—å—Ç—è–µ–≤–∞"))
async def other_curses(message: Message):
    
    data = await db.load_curses_for_other()
    for item in data:
        msg = text(bold(f"–ö—É—Ä—Å \"{item[0]}\"\n"), item[1], sep="\n")
        await bot.send_message(message.from_user.id, msg, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(row_width=1)\
            .add(InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∫—É—Ä—Å \"{item[0]}\"", url=item[2])))
        
        


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - –æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏
@dp.message_handler()
async def chat_only_with_buttons(message: Message):
    
    await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—â–∞–π—Ç–µ—Å—å —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ãüòâ")


# –ü–æ–ª–ª–∏–Ω–≥
executor.start_polling(dp, skip_updates=True, on_startup=on_startup)